/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ui.PlasmaMatchWorkSpace;

import Business.EcoSystem;
import Business.Enterprise.Enterprise;
import Business.Enterprise.HospitalEnterprise;
import Business.Network.Network;
import Business.Organization.Organization;
import Business.People.Donor;
import Business.People.Recipient;
import java.awt.CardLayout;
import java.awt.Font;
import java.awt.Frame;
import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.net.HttpURLConnection;
import java.net.URL;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.Properties;
import java.util.TreeMap;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author TEJAL
 */
public class PlasmaMatchRecipientJPanel extends javax.swing.JPanel {
    
    JPanel rightPanel;
    EcoSystem system;
    List<Recipient> recipientList;
    Donor donorEmail;
    Recipient recipientEmail;

    /**
     * Creates new form OrganMatchRecipientJPanel
     */
    public PlasmaMatchRecipientJPanel(JPanel rightPanel, EcoSystem system, List<Recipient> recipientList) {
        initComponents();
        this.rightPanel = rightPanel;
        this.system = system;
        this.recipientList = recipientList;
        populateRecipientTable();
        recipientInfoJTable.getTableHeader().setFont(new Font("Times New Roman", Font.ITALIC, 23));
        donorInfoJTable.getTableHeader().setFont(new Font("Times New Roman", Font.ITALIC, 23));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        recipientInfoJTable = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        donorInfoJTable = new javax.swing.JTable();
        donorTblButton = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();

        recipientInfoJTable.setFont(new java.awt.Font("Times New Roman", 1, 23)); // NOI18N
        recipientInfoJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Recipient Name", "Network", "Organ", "Severity"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(recipientInfoJTable);

        donorInfoJTable.setFont(new java.awt.Font("Times New Roman", 1, 23)); // NOI18N
        donorInfoJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Donor Name", "Network", "Current Organ Availabilty"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(donorInfoJTable);

        donorTblButton.setBackground(new java.awt.Color(153, 204, 255));
        donorTblButton.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        donorTblButton.setText("Find Match");
        donorTblButton.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        donorTblButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                donorTblButtonActionPerformed(evt);
            }
        });

        jButton3.setBackground(new java.awt.Color(153, 204, 255));
        jButton3.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        jButton3.setText("Inform About Match");
        jButton3.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton2.setBackground(new java.awt.Color(153, 204, 255));
        jButton2.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        jButton2.setText("PieChart");
        jButton2.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton4.setBackground(new java.awt.Color(153, 204, 255));
        jButton4.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        jButton4.setText("<< Back");
        jButton4.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 260, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 260, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 800, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(donorTblButton, javax.swing.GroupLayout.PREFERRED_SIZE, 260, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 800, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(34, 34, 34)
                        .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(40, Short.MAX_VALUE)
                .addComponent(jButton4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(donorTblButton)
                .addGap(44, 44, 44)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(69, 69, 69)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jButton2)
                        .addGap(38, 38, 38))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jButton3)
                        .addGap(27, 27, 27))))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void donorTblButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_donorTblButtonActionPerformed
        int selectedRow = recipientInfoJTable.getSelectedRow();
        
        if(selectedRow >= 0){
            recipientEmail = (Recipient) recipientInfoJTable.getValueAt(selectedRow, 0);
           String organ = (String) recipientInfoJTable.getValueAt(selectedRow, 2);
           String city = (String) recipientInfoJTable.getValueAt(selectedRow, 1);
           populateDonorTable(organ, city);    
        }else{

            JOptionPane.showMessageDialog(null, "Please select a row.", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }
    }//GEN-LAST:event_donorTblButtonActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        int selectedRow = donorInfoJTable.getSelectedRow();

        if (selectedRow >= 0) {
            donorEmail = (Donor) donorInfoJTable.getValueAt(selectedRow, 0);
            sendEmail(donorEmail.getEmailid());
            sendEmail(recipientEmail.getEmailid());
            JOptionPane.showMessageDialog(null, "Organ match information is sent successfully via email.");
        } else {
            JOptionPane.showMessageDialog(null, "Please select a row.", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        int number1 = this.donorInfoJTable.getRowCount();
        int number2 = this.recipientInfoJTable.getRowCount();

        Frame frame = new Frame();

        DefaultPieDataset pieDataSet = new DefaultPieDataset();
        pieDataSet.setValue("Total Donor", number1);
        pieDataSet.setValue("Total Recipient by Severity", number2);
        JFreeChart chart = ChartFactory.createPieChart("Pie Chart", pieDataSet, true, true, true);

        ChartPanel cp = new ChartPanel(chart);
        frame.add(cp);

        frame.pack();
        frame.setVisible(true);
        cp.setSize(600, 600);
        cp.setVisible(true);

    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // TODO add your handling code here:

        ManagePlasmaMatchJPanel manageCitiesJPanel = new ManagePlasmaMatchJPanel(rightPanel, system);
        rightPanel.add("manageCitiesJPanel", manageCitiesJPanel);
        CardLayout layout = (CardLayout) rightPanel.getLayout();
        layout.next(rightPanel);
    }//GEN-LAST:event_jButton4ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable donorInfoJTable;
    private javax.swing.JButton donorTblButton;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable recipientInfoJTable;
    // End of variables declaration//GEN-END:variables

    private void populateRecipientTable() {
        DefaultTableModel model = (DefaultTableModel) recipientInfoJTable.getModel();

        model.setRowCount(0);

        for (Recipient recipient : recipientList) {
            Object[] row = new Object[4];
            row[0] = recipient;
            row[1] = recipient.getNetwork();
            row[2] = recipient.getOrgan();
            row[3] = recipient.getPriority();

            model.addRow(row);
        }
        //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    private void populateDonorTable(String organ, String city) {
        DefaultTableModel model = (DefaultTableModel) donorInfoJTable.getModel();

        //HashMap<String, Donor> donorList = new HashMap<String, Donor>();
        List<Donor> donorList = new ArrayList<Donor>();

        model.setRowCount(0);
        for (Network network : system.getNetworkList()) {
            for (Enterprise enterprise : network.getEnterpriseDirectory().getEnterpriseList()) {
                if(enterprise instanceof HospitalEnterprise){
                    for (Organization or : enterprise.getOrganizationDirectory().getOrganizationList()) {
                        if (or.getName().equalsIgnoreCase("Visitor Organization")) {
                            for (Donor donor : or.getDonorDirectory().getDonorList()) {
                                for (String part : donor.getOrgans()) {
                                    if (part.equalsIgnoreCase(organ)) {
                                        // donorList.put(network.getName(), donor);
                                        donor.setNetwork(network.getName());
                                        donorList.add(donor);

                                    }
                                }
                            }
                        }

                   }
                }
            }

        }
        
        Map<Double, Donor> cityDistMap = findDistanceBetweenCities(donorList, city);
        
        for(Donor obj : cityDistMap.values()){
            Object[] row = new Object[3];
            row[0] = obj;
            row[1] = obj.getNetwork();
            row[2] = obj.getIsOrganAvaiNow();

            model.addRow(row);
        }
    }
    
    private Map<Double, Donor> findDistanceBetweenCities(List<Donor> donorList, String source) {
        
        Map<Double, Donor> cityDistMap = new TreeMap<Double, Donor>();
        
        for(Donor donor : donorList){
            double distance = getDistance(source, donor.getNetwork());
            cityDistMap.put(distance, donor);
        }
        return cityDistMap;
    }
    
        //to find distance between cities
        public static double getDistance(String fromAddress, String toAddres) {
            Map from = getGeoCodes(fromAddress);
            Map to = getGeoCodes(toAddres);
            return distance((Double) from.get("lat"), (Double) from.get("lng"), (Double) to.get("lat"), (Double) to.get("lng"), "K");

        }
    
        public static Map getGeoCodes(String address) {
           try {
               String geoCodeUrl = "https://maps.googleapis.com/maps/api/geocode/json?address=";
               String key = "&key=AIzaSyBiz8PYrcTF4KFwOEpOANYPcgxZUDz3_kU";
               StringBuilder result = new StringBuilder();
               URL url = new URL(geoCodeUrl + address + key);
               HttpURLConnection conn = (HttpURLConnection) url.openConnection();
               conn.setRequestMethod("GET");
               BufferedReader rd = new BufferedReader(new InputStreamReader(conn.getInputStream()));
               String line;
               while ((line = rd.readLine()) != null) {
                   result.append(line);
               }
               rd.close();
               Map resultMap = new ObjectMapper().readValue(result.toString(), Map.class);
               return (Map) ((Map) ((Map) ((List) resultMap.get("results")).get(0)).get("geometry")).get("location");
           } catch (Throwable throwable) {
               throwable.printStackTrace();
           }
           return null;
       }
     
        public static double distance(double lat1, double lon1, double lat2, double lon2, String sr) {
           double theta = lon1 - lon2;
           double dist = Math.sin(deg2rad(lat1)) * Math.sin(deg2rad(lat2)) + Math.cos(deg2rad(lat1)) * Math.cos(deg2rad(lat2)) * Math.cos(deg2rad(theta));
           dist = Math.acos(dist);
           dist = rad2deg(dist);
           dist = dist * 60 * 1.1515;
           if (sr.equals("K")) {
               dist = dist * 1.609344;
           } else if (sr.equals("N")) {
               dist = dist * 0.8684;
           }
           return (dist);
       }

       public static double deg2rad(double deg) {
           return (deg * Math.PI / 180.0);
       }

       public static double rad2deg(double rad) {
           return (rad * 180.0 / Math.PI);
       }

        private void sendEmail(String emailAdd) {
            final String to = emailAdd;
            boolean sessionDebug=false;
            String from = "sidjonas12345@gmail.com"; 
            String host = "smtp.gmail.com";
            String user="sidjonas12345@gmail.com";
            String pass = "Smart@1995";
            Properties properties = System.getProperties();  
            properties.setProperty("mail.smtp.host", host); properties.put("mail.smtp.starttls.required", "true");
            properties.put("mail.smtp.starttls.enable", "true");
            properties.put("mail.smtp.host",host);  
            properties.put("mail.smtp.port", "587");  
            properties.put("mail.smtp.auth", "true");  
       //     java.security.Security.addProvider(new com.sun.net.ssl.internal.ssl.Provider());  
            Session session;
            session = Session.getDefaultInstance(properties,  null);
            session.setDebug(sessionDebug);
            try{
            MimeMessage message = new MimeMessage(session);  
            message.setFrom(new InternetAddress(from));  
            message.setRecipient(Message.RecipientType.TO,new InternetAddress(to));  
            InternetAddress address;
            address = new InternetAddress(to);
            message.setSubject("Did you know?");  
            message.setText("We have paired "+ donorEmail.getEmailid()+ " with " + recipientEmail.getEmailid()+ " for organ transplant.");  
            Transport transport = session.getTransport("smtp");
            transport.connect(host,user,pass);
            transport.sendMessage(message, message.getAllRecipients());
            transport.close();
            //JOptionPane.showMessageDialog(null, "Please check your email for further details!");
            }
            
            catch(Exception e){
                System.out.println(e);
                JOptionPane.showMessageDialog(null, "Error!");
            }
        }
}
