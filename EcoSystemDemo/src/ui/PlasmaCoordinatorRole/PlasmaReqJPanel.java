/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ui.PlasmaCoordinatorRole;

import Business.DB4OUtil.DB4OUtil;
import Business.EcoSystem;
import Business.Enterprise.Enterprise;
import Business.Network.Network;
import Business.Organization.Organization;
import Business.Organization.PlasmaOrganization;
import Business.Organization.SysCoordinatorOrganization;
import Business.UserAccount.UserAccount;
import Business.WorkQueue.WorkRequest;
import Home.TableFormat;
import static java.time.Clock.system;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author TEJAL
 */
public class PlasmaReqJPanel extends javax.swing.JPanel {
    /**
     * Creates new form PlasmaReqJPanel
     */
    private UserAccount userAccount;
    private PlasmaOrganization plasmaOrg;
    private Network network;
    private Enterprise enterprise;
    private DB4OUtil dB4OUtil = DB4OUtil.getInstance();
    private EcoSystem ecosystem;
    
    public PlasmaReqJPanel(UserAccount userAccount, PlasmaOrganization plasmaOrg, Enterprise enterprise, Network network, EcoSystem ecosystem) {
        initComponents();
        this.userAccount = userAccount;
        this.plasmaOrg = plasmaOrg;
        this.enterprise = enterprise;
        this.network = network;
        this.ecosystem = ecosystem;
         
        jPanel1.setVisible(false);
        tblPlasmaCoordinator.getTableHeader().setDefaultRenderer(new TableFormat());
        populateTextFields();
        populatePlasmaCoordinatorTable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        txtApositive = new javax.swing.JTextField();
        btnApprove = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        txtAnegative = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        txtOpositive = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        txtBnegative = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        txtBpositive = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        txtOnegative = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        txtABpositive = new javax.swing.JTextField();
        jLabel13 = new javax.swing.JLabel();
        txtABnegative = new javax.swing.JTextField();
        btnOnHold = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblPlasmaCoordinator = new javax.swing.JTable();
        jPanel3 = new javax.swing.JPanel();
        jLabel25 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();

        jLabel1.setFont(new java.awt.Font("Arial", 1, 24)); // NOI18N
        jLabel1.setText("List of Plasma Requests");

        jLabel3.setBackground(new java.awt.Color(0, 0, 0));
        jLabel3.setFont(new java.awt.Font("Arial", 1, 24)); // NOI18N
        jLabel3.setText("Blood Group Category");

        jLabel4.setBackground(new java.awt.Color(0, 0, 0));
        jLabel4.setFont(new java.awt.Font("Arial", 1, 24)); // NOI18N
        jLabel4.setText("Available Blood Groups");

        jLabel5.setFont(new java.awt.Font("Arial", 1, 20)); // NOI18N
        jLabel5.setText("A+");

        txtApositive.setFont(new java.awt.Font("Arial", 1, 20)); // NOI18N
        txtApositive.setForeground(new java.awt.Color(255, 255, 255));
        txtApositive.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtApositiveActionPerformed(evt);
            }
        });

        btnApprove.setBackground(new java.awt.Color(31, 31, 31));
        btnApprove.setFont(new java.awt.Font("Arial", 1, 20)); // NOI18N
        btnApprove.setText("Approve Request");
        btnApprove.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        btnApprove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnApproveActionPerformed(evt);
            }
        });

        jLabel7.setFont(new java.awt.Font("Arial", 1, 20)); // NOI18N
        jLabel7.setText("A-");

        txtAnegative.setFont(new java.awt.Font("Arial", 1, 20)); // NOI18N
        txtAnegative.setForeground(new java.awt.Color(255, 255, 255));

        jLabel8.setFont(new java.awt.Font("Arial", 1, 20)); // NOI18N
        jLabel8.setText("O+");

        txtOpositive.setFont(new java.awt.Font("Arial", 1, 20)); // NOI18N
        txtOpositive.setForeground(new java.awt.Color(255, 255, 255));

        jLabel9.setFont(new java.awt.Font("Arial", 1, 20)); // NOI18N
        jLabel9.setText("O-");

        txtBnegative.setFont(new java.awt.Font("Arial", 1, 20)); // NOI18N
        txtBnegative.setForeground(new java.awt.Color(255, 255, 255));

        jLabel10.setFont(new java.awt.Font("Arial", 1, 20)); // NOI18N
        jLabel10.setText("B+");

        txtBpositive.setFont(new java.awt.Font("Arial", 1, 20)); // NOI18N
        txtBpositive.setForeground(new java.awt.Color(255, 255, 255));

        jLabel11.setFont(new java.awt.Font("Arial", 1, 20)); // NOI18N
        jLabel11.setText("B-");

        txtOnegative.setFont(new java.awt.Font("Arial", 1, 20)); // NOI18N
        txtOnegative.setForeground(new java.awt.Color(255, 255, 255));

        jLabel12.setFont(new java.awt.Font("Arial", 1, 20)); // NOI18N
        jLabel12.setText("AB+");

        txtABpositive.setFont(new java.awt.Font("Arial", 1, 20)); // NOI18N
        txtABpositive.setForeground(new java.awt.Color(255, 255, 255));

        jLabel13.setFont(new java.awt.Font("Arial", 1, 20)); // NOI18N
        jLabel13.setText("AB-");

        txtABnegative.setFont(new java.awt.Font("Arial", 1, 20)); // NOI18N
        txtABnegative.setForeground(new java.awt.Color(255, 255, 255));

        btnOnHold.setBackground(new java.awt.Color(0, 0, 0));
        btnOnHold.setFont(new java.awt.Font("Arial", 1, 20)); // NOI18N
        btnOnHold.setText("Hold Request");
        btnOnHold.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        btnOnHold.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOnHoldActionPerformed(evt);
            }
        });

        tblPlasmaCoordinator.setBackground(new java.awt.Color(0, 0, 0));
        tblPlasmaCoordinator.setFont(new java.awt.Font("Arial", 1, 20)); // NOI18N
        tblPlasmaCoordinator.setForeground(new java.awt.Color(255, 255, 255));
        tblPlasmaCoordinator.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Request Number", "Patient ID", "Patient Name", "Email ID", "Blood Group", "Status"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblPlasmaCoordinator.setGridColor(new java.awt.Color(0, 0, 0));
        tblPlasmaCoordinator.setIntercellSpacing(new java.awt.Dimension(0, 0));
        tblPlasmaCoordinator.setRowHeight(30);
        tblPlasmaCoordinator.setShowVerticalLines(false);
        tblPlasmaCoordinator.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblPlasmaCoordinatorMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(tblPlasmaCoordinator);

        jPanel3.setBackground(new java.awt.Color(204, 204, 204));
        jPanel3.setPreferredSize(new java.awt.Dimension(926, 70));

        jLabel25.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel25.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel25.setText("Plasma Bank");
        jLabel25.setOpaque(true);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel25, javax.swing.GroupLayout.DEFAULT_SIZE, 1550, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel25, javax.swing.GroupLayout.DEFAULT_SIZE, 48, Short.MAX_VALUE)
                .addContainerGap())
        );

        jPanel1.setBackground(new java.awt.Color(204, 204, 204));

        jLabel6.setBackground(new java.awt.Color(255, 255, 255));
        jLabel6.setForeground(new java.awt.Color(255, 255, 255));
        jLabel6.setOpaque(true);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, 590, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, 158, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1570, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, 1570, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(layout.createSequentialGroup()
                            .addGap(640, 640, 640)
                            .addComponent(jLabel1))
                        .addGroup(layout.createSequentialGroup()
                            .addGap(80, 80, 80)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 1270, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createSequentialGroup()
                            .addGap(420, 420, 420)
                            .addComponent(jLabel3)
                            .addGap(41, 41, 41)
                            .addComponent(jLabel4))
                        .addGroup(layout.createSequentialGroup()
                            .addGap(270, 270, 270)
                            .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(50, 50, 50)
                            .addComponent(txtApositive, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(350, 350, 350)
                            .addComponent(jLabel7)
                            .addGap(40, 40, 40)
                            .addComponent(txtAnegative, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createSequentialGroup()
                            .addGap(270, 270, 270)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel8)
                                .addComponent(jLabel12))
                            .addGap(41, 41, 41)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(txtBpositive, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(txtOpositive, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(txtABpositive, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGap(100, 100, 100)
                            .addComponent(jLabel15, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(120, 120, 120)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel11)
                                .addComponent(jLabel9)
                                .addComponent(jLabel13))
                            .addGap(26, 26, 26)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(txtBnegative, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(txtOnegative, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(txtABnegative, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGroup(layout.createSequentialGroup()
                            .addGap(510, 510, 510)
                            .addComponent(btnOnHold, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(20, 20, 20)
                            .addComponent(btnApprove, javax.swing.GroupLayout.PREFERRED_SIZE, 210, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createSequentialGroup()
                            .addGap(410, 410, 410)
                            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGap(0, 0, Short.MAX_VALUE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 830, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(10, 10, 10)
                    .addComponent(jLabel1)
                    .addGap(12, 12, 12)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(20, 20, 20)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jLabel3)
                        .addComponent(jLabel4))
                    .addGap(32, 32, 32)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(txtApositive, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel7)
                        .addComponent(txtAnegative, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGap(10, 10, 10)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jLabel15, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(txtBnegative, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(20, 20, 20)
                            .addComponent(txtOnegative, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(20, 20, 20)
                            .addComponent(txtABnegative, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createSequentialGroup()
                            .addGap(10, 10, 10)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(20, 20, 20)
                                    .addComponent(jLabel8)
                                    .addGap(26, 26, 26)
                                    .addComponent(jLabel12))
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(txtBpositive, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(20, 20, 20)
                                    .addComponent(txtOpositive, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(20, 20, 20)
                                    .addComponent(txtABpositive, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jLabel11)
                                    .addGap(16, 16, 16)
                                    .addComponent(jLabel9)
                                    .addGap(26, 26, 26)
                                    .addComponent(jLabel13)))))
                    .addGap(10, 10, 10)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(btnOnHold, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btnApprove, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGap(20, 20, 20)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void txtApositiveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtApositiveActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtApositiveActionPerformed

    private void btnApproveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnApproveActionPerformed
        // TODO add your handling code here:
        int selectedRow = tblPlasmaCoordinator.getSelectedRow();

        if (selectedRow < 0){
            //JOptionPane.showMessageDialog(null, "Please select a row first!" );
            

            return;
        }
        else{
            WorkRequest request = (WorkRequest)tblPlasmaCoordinator.getValueAt(selectedRow, 0);
            if(request.getStatus().equals("Approved. Passing to Plasma Organization")
                || request.getStatus().equals("Need to wait as Plasma is not avaiolable")){
                request.setStatus("Plasma Organization Approved. Passing to System Coordinator");

                dB4OUtil.storeSystem(ecosystem);
                populatePlasmaCoordinatorTable();

                Enterprise ent = null;
                Organization org = null;

                for (Enterprise enterprise : network.getEnterpriseDirectory().getEnterpriseList()) {
                    if (enterprise.getEnterpriseType().toString().equals("Hospital")) {
                        ent = enterprise;
                        break;
                    }
                }
                for (Organization organization : ent.getOrganizationDirectory().getOrganizationDirectory()) {
                    if(organization instanceof SysCoordinatorOrganization) {
                        org = organization;
                        break;
                    }
                }

                if (org != null) {
                    org.getWorkQueue().getWorkRequestList().add(request);
                    org.getBloodGroup().subtractBloodGroup(request.getPatient().getBloodGroup());
                    populateTextFields();
                }
                else {
                    JOptionPane.showMessageDialog(null, "No organization present", "Error", JOptionPane.ERROR_MESSAGE);
                }
            }
            else{
                // JOptionPane.showMessageDialog(null, "Work Request is already in progress!" );
                

            }
        }

        dB4OUtil.storeSystem(ecosystem);
    }//GEN-LAST:event_btnApproveActionPerformed

    private void btnOnHoldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOnHoldActionPerformed
        // TODO add your handling code here:
        int selectedRow = tblPlasmaCoordinator.getSelectedRow();

        if (selectedRow < 0){
            //JOptionPane.showMessageDialog(null, "Please select a row first!" );

            
        }
        else{
            WorkRequest request = (WorkRequest)tblPlasmaCoordinator.getValueAt(selectedRow, 0);
            if(request.getStatus().equals("Approved. Passing to PlasmaOrg")){
                request.setStatus("On Hold Due to Plasma unavailability");

                dB4OUtil.storeSystem(ecosystem);
                populatePlasmaCoordinatorTable();
            }
            else{
                

                //  JOptionPane.showMessageDialog(null, "Work Request is already in progress!" );
            }
        }

    }//GEN-LAST:event_btnOnHoldActionPerformed

    private void tblPlasmaCoordinatorMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblPlasmaCoordinatorMouseClicked
        // TODO add your handling code here:

        int selectedRow = tblPlasmaCoordinator.getSelectedRow();
        // jPanel1.setVisible(true);
        if (selectedRow < 0){
            //JOptionPane.showMessageDialog(null, new JLabel(  "<html><h2><I>Please select<font color='red'> a row</font> from the<font color='green'> table!</I></font></h2></html>"), "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }
        else{
            jPanel1.setVisible(true);
            WorkRequest request = (WorkRequest)tblPlasmaCoordinator.getValueAt(selectedRow, 0);
            if(request.getStatus().equals("Approved. Passing to PlasmaBank")){
                //request.setStatus("On Hold Due to Plasma unavailability");
                if(request.getPatient().isEmergencyStatus() == true){
                    jPanel1.setVisible(true);
                }
                //dB4OUtil.storeSystem(system);
                //populatePlasmaCoordinatorTable();
            }
            else{
                //JOptionPane.showMessageDialog(null, new JLabel("<html><h2><I>Work Request is<font color='red'> already</font> in progress!</I></h2></html>"), "Warning", JOptionPane.WARNING_MESSAGE);
                jPanel1.setVisible(false);
                //  JOptionPane.showMessageDialog(null, "Work Request is already in progress!" );
            }
        }

    }//GEN-LAST:event_tblPlasmaCoordinatorMouseClicked


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnApprove;
    private javax.swing.JButton btnOnHold;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable tblPlasmaCoordinator;
    private javax.swing.JTextField txtABnegative;
    private javax.swing.JTextField txtABpositive;
    private javax.swing.JTextField txtAnegative;
    private javax.swing.JTextField txtApositive;
    private javax.swing.JTextField txtBnegative;
    private javax.swing.JTextField txtBpositive;
    private javax.swing.JTextField txtOnegative;
    private javax.swing.JTextField txtOpositive;
    // End of variables declaration//GEN-END:variables

    private void populateTextFields() {
        Enterprise ent1 = null;
        Organization org1 = null;
        
        for (Enterprise enterprise : network.getEnterpriseDirectory().getEnterpriseList()) {
            if (enterprise.getEnterpriseType().toString().equals("PlasmaBank")) {
            
                ent1 = enterprise;
                System.out.println(enterprise);
                break;
            }
        }
       
        for (Organization organization : ent1.getOrganizationDirectory().getOrganizationDirectory()) {
            if(organization instanceof PlasmaOrganization) {
                org1 = organization;
                break;
            }
        }
        
        if (org1 != null) {
           
            System.out.println(org1.getName()+"Orgcheck");
            
            //user.addUserRequest(request);
          
        } else {
        
         JOptionPane.showMessageDialog(null, "No organization", "Error", JOptionPane.ERROR_MESSAGE);
        }
        
        txtAnegative.setText(String.valueOf(org1.getBloodGroup().getaNeg()));
        txtApositive.setText(String.valueOf(org1.getBloodGroup().getaPos()));
        txtABpositive.setText(String.valueOf(org1.getBloodGroup().getAbPos()));
        txtABnegative.setText(String.valueOf(org1.getBloodGroup().getAbNeg()));
        txtOpositive.setText(String.valueOf(org1.getBloodGroup().getoPos()));
        txtOnegative.setText(String.valueOf(org1.getBloodGroup().getoNeg()));
        txtBpositive.setText(String.valueOf(org1.getBloodGroup().getbPos()));
        txtBnegative.setText(String.valueOf(org1.getBloodGroup().getbNeg()));
    }

    private void populatePlasmaCoordinatorTable() {
    DefaultTableModel model = (DefaultTableModel)tblPlasmaCoordinator.getModel();
        
        model.setRowCount(0);
        
        for(WorkRequest request : userAccount.getWorkQueue().getWorkRequestList()){
            Object[] row = new Object[6];
            row[0] = request;
            row[1] = request.getPatient();
            row[2] = request.getPatient().getName();
            row[3] = request.getPatient().getEmailID();
            row[4] = request.getPatient().getBloodGroup();
            row[5] = request.getStatus();
             
            model.addRow(row);
        }    
    }
}
